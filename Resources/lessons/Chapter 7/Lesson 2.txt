Chapter 7: Object Orientation
Lesson 2: Inheritance

Inheritance is the concept of classes gaining variables and methods from parent classes. If we use the previous example of dogs and make the parent class of "Animal":
	public class Animal 
	{
		private String Name;
		
		public Animal(String name)
		{
			Name = name;
		}
		
		public String getName() 
		{
			return Name;
		}
		
		private void setName(String name) 
		{
			Name = name;
		}
	}
Dog will now not have Name or getName/setName, as well as the keyword "extends":
	public class Dog extends Animal
	{
		private int Age;
		private String FurColor;
		
		public Dog(int age, String name, String furColor)
		{
			super(name);
			//this will call the super class and construct a new animal with the name
			Age = age;
			FurColor = furColor;
		}
		
		public void Speak()
		{
			System.out.println("Hello, I'm " + super.getName() + ", I mean, Woof!");
			//here we need to use "super" to specify the animal method "getName()"
		}
	}
	
Now if we create a new dog it can use the method getName() without having it in it's own class:
	Dog d = new Dog(12, "Patch", "white");
	d.Speak();
	System.out.println(d.getName());

This doesn't work the other way. Animals can't use the "speak()" method, but animals can use the "setName()" method.


Okay, onto C#, again it's fairly similar to Java:
	class Dog : Animal
	{
		private int Age;
		private string FurColor;

		public Dog(string name, int age, string furColor) : base(name)
		{
			Age = age;
			FurColor = furColor;
		}

		public void Speak()
		{
			Console.WriteLine("Hello, I'm " + getName() + ", I mean, Woof!");
		}
	}

Instead of "extends" it uses a colon ":", you need to specify the parameters of the parent class in the constructor with "base(param)", and you don't need to specify "super" for inherited methods.