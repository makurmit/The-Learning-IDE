Chapter 2: The Basics
Lesson 1: Primitive Typing

Primitive types is a fancy way of saying variables. Variables store data, can be read, manipulated, and deleted throughout a program. Almost every language since C has variables, the standard is: byte, short, int, long, float, double, char, and boolean. 
int, byte, short, and long represent whole numbers. float and double are floating point (decimal numbers). boolean is a bit different, it determines true or false. Lastly char is a single character, whether that be "1", "A", or "#".

The most commonly used variables are int, double, and boolean (since this is an overview these are the only ones I'll be talking about). An int can hold any whole number from -2,147,483,648 to +2,147,483,647. A double can hold pretty much any number you can think of but they tend to use more resources and should only be used if necessary. Lastly a boolean is used for true and false states, so a variable named "IsValid" will return either true or false and nothing else.


Okay now on to assigning values to these variables. In order to actually use variables we have to give them a name, this is called declaration. An example for int is 
	int num; 
the 'name' of this variable is "num", it can only hold whole numbers because it is an int. Now we have to give "num" a value, this is called initialization, it's simply done by putting it on the left side of an equals sign and the value on the right 
	int num;
	num = 42;
(this isn't interchangeable you cannot do "42 = num;"). In most cases both steps are done in one line
	int num = 42;
	
shorts, longs, and bytes can all be initialized just like ints, just keep in mind they have different maximum values.
	
A double can be initialized the same way:
	double num = 42.42;
floats hava one small difference:
	float num = 42.42f;
if it's not a whole number you need to add 'f' to the end of the number.
	
Booleans are a bit different, they only take true or false (sometimes they may be capitalized, it depends on the language). An example of a boolean declaration and initialization is 
	boolean IsValid = false;
	
Chars are a bit odd, they can only have a single character and need to be encapsulated with single quotes:
	char c = 'q';
	char c = '1';
	char c = '$';
I wouldn't recommend using chars for numbers as they can only be single digit and they can't have any math done to them.

	
Naming conventions are important, if you don't understand what the variable is used for just by reading it you may want to rename it. Another thing to note about naming variables is they cannot have spaces, for example 
	int high number = 999;
will not work. Instead use camel casing 
	int highNumber = 999;
or snake casing 
	int high_number = 999;
or pascal casing
	int HighNumber = 999;
however this is mainly used for other things, like: classes, methods, and properties. Ultimately it's your choice but best practice for variables is camel and snake casing.


Another essential variable type is the String. Technically it's an object but let's not split hairs here, Strings are used just as often as the primitive types. A String can hold just about anything but is typically used for text (don't use a String for math operations, instead use an int or double). Declaring a String is just like any other variable 
	String text;
it's the assigning that's a little different. Since Strings can only hold text we need to specify what we're giving it is text with quotes:
	String text = "Hello World";
You can put whatever you want within the quotes, even spaces! Last thing about Strings is that while math can't be used on them (you can't divide by "hello") you can combine them. For example if I combined "hello" and "world" I would get "helloworld". This can even be used in print methods:
	String h = "Hello";
	String w = "World!";
	System.out.println(h + " " + w);
That will print "Hello World"


Some languages (Python and Ruby) are dynamically typed, meaning they don't need variable declaration. Instead they will figure out what the variable is based on the value (they still use these types we just don't have to tell them what they are). For example a variable declaration in Python looks like this
	num = 10
Python knows num is an int because it's a whole number. If I were to change it
	num = 10.5
num would change to a double, it can even change to a String 
	num = "hello"
would also work. Another thing to note is some languages (Java and C#) require a semicolon (;) at the end of a line while others (Python and Ruby) don't.


JavaScript is a bit of both. We need to specify that it's a variable but not what type, since it's dynamically typed. It's also weakly typed, variables will change their type if you tell them to. This is a bit of a double edged sword as values may be  unintentionally changed because of this. Anyway, here's an example:
	var num = 10;
	num = "name";






Woo that was a lot of text, congrats on getting to the bottom. Now you can play around with different variables (if you need to see what value a variable has use "print()" in Python, "puts()" in Ruby, "System.out.println()" in Java, or "Console.WriteLine()" in C# just put the variable name inside the parentheses).