Chapter 5: Advanced Concepts
Lesson 1: Arrays and Lists


Arrays and arraylists are used to group together multiple values of the same type. First we must declare what type of array it is and its size, note that arrays cannot have more indexes than specified. As far as the actual syntax it's pretty simple:
	int[] nums = new int[5];
Notice how the declaration is just "int" and two square brackets "[]", the second half of the line specifies that we are making a new array and it's length is 5. Now let's assign a value:
	nums[0] = 10;
This will change the first value to 10. Keep in mind that arrays are zero based, meaning that "nums[1]" is the second index. A quick way to populate the whole array is to use curly brackets "{}":
	int[] nums = {10, 20, 30};
Just remember that we can't store more than the amount of ints that we declared. 


A very efficient way to iterate through an array is to use a for loop or a foreach loop. A foreach loop iterates through a section of code for each index in an array.
	int[] nums = {1, 3, 3, 7};
	System.out.print("My favorite numbers are: ")
	for(int num : nums)
	{
		System.out.print(num);
	}
This will print "My favorite numbers are: 1337".


An arraylist is just like an array, except you can add and remove indexes from it. Here's how to create one:
	//import at the top of the file
	import java.util.ArrayList;
	
	//First we specify the type within angle brackets "<>"
	ArrayList<Integer> nums = new ArrayList();
	nums.add(10);
	nums.add(20);
	nums.add(5);
	//We need to use the ArrayList.get() method here to obtain the value at the index within the parentheses
	//this will print 20
	System.out.println(nums.get(1));
	nums.set(0, 50);
	//this will change the value of the index 0 to 50
	nums.remove(1);
	//this will print 5
	System.out.println(nums.get(1));
	
	//Since ArrayLists size changes this will tell us how big it is
	System.out.println(nums.size());
The arraylist moves as you add and remove indexes, as shown above it was {10, 20, 5} then I removed 10 and made 5 the second index.

C# is fairly similar to the above Java. Here's the differences:
	using Systems.Collections;
	//at the top of the file
	
	ArrayList nums = new ArrayList();
	nums.Add(10);
	nums.Add(20);
	nums.Add(30);
	Console.WriteLine(nums[1]);
	//this will output 20
	nums.RemoveAt(1);
	Console.WriteLine(nums[1]);
	//this will output 30
	nums[1] = 50;
	Console.WriteLine(nums[1]);
	//this will output 50
	Console.WriteLine(nums.Count);
	//this will output 2

Okay, now let's talk about Python. Python uses lists which is closest to arraylists. This is how you initialize it:
	myList = [1, 2, 3]
	myList.append(4)
	#this will print "[1, 2, 3, 4]"
	print(myList)
	#this will print 2
	print(myList[1])
	del myList[1]
	#this will print 3
	print(myList[1])
	
Ruby arrays are very similar to Python lists, here's how to use them:
	myArr = [1, 2, 3]
	myArr.push(4)
	#this will output 1 2 3 4 on separate lines
	puts myArr
	myArr.delete_at(1)
	#this will output 1 3 4
	puts myArr