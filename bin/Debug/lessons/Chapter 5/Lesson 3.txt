Chapter 5: Advanced Concepts
Lesson 3: Modulus

Modulus is remainder math, something you probably learned in elementary school but haven't used since. However modulus is very useful in programming. A quick refresher: modulus determines the whole number left over after a number is divide by another, for example:
	6 / 4 = 1.5
but with modulus we determine the remainder:
	6 % 4 = 2
because 4 can go into 6 once and have a remaining 2 leftover, in math terms:
	6 / 4 = 1  R=>2
	
	
Modulus is very useful for determining if a number is divisible by another. Let's say we wanted to print a 3x3 grid, we would first create a for loop and an if statement:
	for (int i = 0; i < 9; i++)
	{
		//if this is the third index
		if()
		{
			//print i on a new line
		}
		else
		{
			//print i
		}
	}
Okay now how would we write "i" is divisible by 3? Well if modulus tells us how much is leftover we could say if nothing is leftover it's divisible. Let's put that into a boolean statement:
	if(i % 3 == 0)
	{
		//do something
	}
Now let's put that into the code:
	for (int i = 0; i < 9; i++)
	{
		//if this is the third index
		if(i % 3 == 0)
		{
			//print i on a new line
		}
		else
		{
			//print i
		}
	}

Lastly we must print i on a new line, this is pretty simple. All we need is the new line character "\n":
	for (int i = 0; i < 9; i++)
	{
		//if this is the third index
		if(i % 3 == 0)
		{
			//print won't make a new line after the statement
			System.out.print("\n" + i);
		}
		else
		{
			System.out.print(i);
		}
	}
This will output:
	
	012
	345
	678
Which is okay, but let's make it look more presentable:
	for (int i = 0; i < 9; i++)
	{
		//I added the i > 0 to get rid of the extra space before the first line (because 0 % anything is 0)
		if(i % 3 == 0 && i > 0)
		{
			//this will create a divide between each line
			System.out.print("\n---------");
			//All this adds is a nice column divider between numbers but it works pretty well
			System.out.print("\n|" + i + "|");
		}
		else {
			System.out.print("|" + i + "|");
		}
	}
This is the new output:
	|0||1||2|
	---------
	|3||4||5|
	---------
	|6||7||8|
Much nicer and a lot more readable

Now the real beauty of modulus is that we can make this grid huge just by changing 2 numbers, let's make a 20x20 grid:
	//first I changed 9 to 36 so it will run for the whole grid
	for (int i = 0; i < 36; i++)
	{
		//all I changed in this line is "% 3" to "% 6" because we want 6 rows
		if(i % 6 == 0 && i > 0)
		{	
			//I wanted to make sure this reached the end of the grid
			System.out.print("\n------------------------");
			System.out.print("\n|" + i + "|");
		}
		else {
			System.out.print("|" + i + "|");
		}
	}
This will output:
	|0||1||2||3||4||5|
	------------------------
	|6||7||8||9||10||11|
	------------------------
	|12||13||14||15||16||17|
	------------------------
	|18||19||20||21||22||23|
	------------------------
	|24||25||26||27||28||29|
	------------------------
	|30||31||32||33||34||35|
	
With a little refactoring we could make this even more dynamic:
	int rowNum = 8;
		
	for (int i = 0; i < rowNum * rowNum; i++)
	{
		if(i % rowNum == 0 && i > 0)
		{
			//this is to make a new line before we start creating the divider
			System.out.print("\n");
			//this will dynamically create the divider (it works best for 2 digit numbers)
			for (int j = 0; j < rowNum * 4; j++)
			{
				System.out.print("-");
			}
			System.out.print("\n|" + i + "|");
		}
		else {
			System.out.print("|" + i + "|");
		}
	}
This will output:
	|0||1||2||3||4||5||6||7|
	--------------------------------
	|8||9||10||11||12||13||14||15|
	--------------------------------
	|16||17||18||19||20||21||22||23|
	--------------------------------
	|24||25||26||27||28||29||30||31|
	--------------------------------
	|32||33||34||35||36||37||38||39|
	--------------------------------
	|40||41||42||43||44||45||46||47|
	--------------------------------
	|48||49||50||51||52||53||54||55|
	--------------------------------
	|56||57||58||59||60||61||62||63|

With one change to "rowNum" we can make a square grid as big as we want (well anything within int's max value of 2,147,483,647)