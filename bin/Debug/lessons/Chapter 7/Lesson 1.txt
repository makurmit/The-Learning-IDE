Chapter 7: Object Orientation
Lesson 1: Classes

Classes are blueprints of variables. Classes have fields which hold values, just like variables. Classes can have their own methods which may manipulate fields in the class. We've already created the main class for our projects but now we'll get into the benefits of creating multiple classes. This is a normal class in Java:
	public class MyProgram {
		public static void main(String[] args) {
			...
		}
	}
The class with the main method is where every Java and C# program starts. From there anything within the program's package/namespace can be used; including other classes. Packages (Java) and namespaces (C#) segregate classes, think of them as file directory, we won't use them and you probably won't need to worry about them but just know about them in case you run into problems later. Let's make a new class:
	public class Dog{
		public Dog(){
			System.out.println("Woof");
		}
	}
The only things you need to specify when creating a new class is the access modifier (public/private), the keyword class, and the name for that class. It can get more complicated but for now that's all we'll use to create classes. Inside every class there is a constructor: a public method without a return type, and is named exactly as the class. This method runs everytime a new instance of the object is made, it constructs the object. Typically this is where the default values of the object variables are set. Let's give this dog some properties:
	public class Dog{
		
		private int Age;
		private String Name;
		private String FurColor;
		
		public Dog(int age, String name, String furColor){
			Age = age;
			Name = name;
			FurColor = furColor;
		}
	}
Okay, what did we just do? We added class wide variables and gave them values based on the constructor which takes in three values: an age, name, and fur color. It's common practice to make the properties of the class (Age, Name, and FurColor) private, so other classes can't see them. Another common practice is to have these properties capitalized and in the constructor simply have lower case variables to assign them values. Let's say we wanted the dog to bark it's name:
	public class Dog{
		
		//Properties ...
		
		public Dog(int age, String name, String furColor){
			//Assigning properties ...
		}
		
		public void Speak(){
			System.out.println("Hello, I'm " + Name + ", I mean, Woof!");
		}
		
	}
Okay now let's head back to our main class MyProgram and create a new Dog:
	
	public class MyProgram {
		public static void main(String[] args) {
			Dog spot = new Dog(5, "Spot", "Brown");
			//"Dog" is the object we're making
			//"spot" is its name (like a normal variable)
			//"new" means create a new instance of it
			//"Dog()" calls the Dog constructor
			spot.Speak();
		}
	}
The code above will create a new dog, spot, and will have him speak. One thing we can't do is change spot's name, at least from this class. But if we were to give the Dog properties certain methods called getters and setters we could access these variables outside their class:
	public class Dog{
		
		//Properties ...
		
		//Constructor and Speak() ...
		
		public String GetName(){
			return Name;
		}
		
		public void SetName(String name){
			Name = name;
		}
	}
Now let's call these methods in the MyProgram class:
	public class MyProgram {
		public static void main(String[] args) {
			Dog spot = new Dog(5, "Spot", "Brown");
			spot.Speak();
			d.SetName("Patch");
			System.out.println("The dog's name is " + d.GetName());
		}
	}
Now we changed spot's name to "Patch" and were able to get it from MyProgram. Let's say we didn't want anyone to change the dog's name, unless the dog was younger than 2:
	public class Dog{
		
		//Properties ...
		
		//Constructor and Speak() ...
		
		//Name getter ...
		
		public void SetName(String name){
			if (Age < 2){
				Name = name;
			}
		}
	}
Now the Name won't change unless the Age is less than 2, so that code we had before will run but spot will keep his name.


Okay, onto the syntax differences:
C# is pretty close to Java (no surprise) with some extra features, most notably getters and setters:
	public class Dog
	{
		private string Name { get; set; }

        //Constructor ...
	}
The only difference is the shortened syntax, instead of creating a whole new method you can just add "{ get; set; }" to have default getters and setters. If you wanted to add the extra if statement above you'll need to create getter and setter methods.

Python:

class NameOfClass:
	#rest of code...


Ruby:

class NameOfClass
	#rest of code...
end